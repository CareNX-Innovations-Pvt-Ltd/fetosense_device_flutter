// Mocks generated by Mockito 5.4.4 from annotations
// in fetosense_device_flutter/test/login_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:appwrite/appwrite.dart' as _i4;
import 'package:appwrite/models.dart' as _i3;
import 'package:appwrite/src/client.dart' as _i2;
import 'package:fetosense_device_flutter/core/utils/preferences.dart' as _i6;
import 'package:fetosense_device_flutter/data/models/user_model.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocumentList_1 extends _i1.SmartFake implements _i3.DocumentList {
  _FakeDocumentList_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocument_2 extends _i1.SmartFake implements _i3.Document {
  _FakeDocument_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Databases].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabases extends _i1.Mock implements _i4.Databases {
  MockDatabases() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.Client);

  @override
  _i5.Future<_i3.DocumentList> listDocuments({
    required String? databaseId,
    required String? collectionId,
    List<String>? queries,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listDocuments,
          [],
          {
            #databaseId: databaseId,
            #collectionId: collectionId,
            #queries: queries,
          },
        ),
        returnValue: _i5.Future<_i3.DocumentList>.value(_FakeDocumentList_1(
          this,
          Invocation.method(
            #listDocuments,
            [],
            {
              #databaseId: databaseId,
              #collectionId: collectionId,
              #queries: queries,
            },
          ),
        )),
      ) as _i5.Future<_i3.DocumentList>);

  @override
  _i5.Future<_i3.Document> createDocument({
    required String? databaseId,
    required String? collectionId,
    required String? documentId,
    required Map<dynamic, dynamic>? data,
    List<String>? permissions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createDocument,
          [],
          {
            #databaseId: databaseId,
            #collectionId: collectionId,
            #documentId: documentId,
            #data: data,
            #permissions: permissions,
          },
        ),
        returnValue: _i5.Future<_i3.Document>.value(_FakeDocument_2(
          this,
          Invocation.method(
            #createDocument,
            [],
            {
              #databaseId: databaseId,
              #collectionId: collectionId,
              #documentId: documentId,
              #data: data,
              #permissions: permissions,
            },
          ),
        )),
      ) as _i5.Future<_i3.Document>);

  @override
  _i5.Future<_i3.Document> getDocument({
    required String? databaseId,
    required String? collectionId,
    required String? documentId,
    List<String>? queries,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDocument,
          [],
          {
            #databaseId: databaseId,
            #collectionId: collectionId,
            #documentId: documentId,
            #queries: queries,
          },
        ),
        returnValue: _i5.Future<_i3.Document>.value(_FakeDocument_2(
          this,
          Invocation.method(
            #getDocument,
            [],
            {
              #databaseId: databaseId,
              #collectionId: collectionId,
              #documentId: documentId,
              #queries: queries,
            },
          ),
        )),
      ) as _i5.Future<_i3.Document>);

  @override
  _i5.Future<_i3.Document> updateDocument({
    required String? databaseId,
    required String? collectionId,
    required String? documentId,
    Map<dynamic, dynamic>? data,
    List<String>? permissions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDocument,
          [],
          {
            #databaseId: databaseId,
            #collectionId: collectionId,
            #documentId: documentId,
            #data: data,
            #permissions: permissions,
          },
        ),
        returnValue: _i5.Future<_i3.Document>.value(_FakeDocument_2(
          this,
          Invocation.method(
            #updateDocument,
            [],
            {
              #databaseId: databaseId,
              #collectionId: collectionId,
              #documentId: documentId,
              #data: data,
              #permissions: permissions,
            },
          ),
        )),
      ) as _i5.Future<_i3.Document>);

  @override
  _i5.Future<dynamic> deleteDocument({
    required String? databaseId,
    required String? collectionId,
    required String? documentId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteDocument,
          [],
          {
            #databaseId: databaseId,
            #collectionId: collectionId,
            #documentId: documentId,
          },
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
}

/// A class which mocks [PreferenceHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPreferenceHelper extends _i1.Mock implements _i6.PreferenceHelper {
  MockPreferenceHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setAutoLogin(bool? isAutoLogin) => super.noSuchMethod(
        Invocation.method(
          #setAutoLogin,
          [isAutoLogin],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool getAutoLogin() => (super.noSuchMethod(
        Invocation.method(
          #getAutoLogin,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  void removeUser() => super.noSuchMethod(
        Invocation.method(
          #removeUser,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> saveUser(_i7.UserModel? user) => (super.noSuchMethod(
        Invocation.method(
          #saveUser,
          [user],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void setAppOpenAt(int? time) => super.noSuchMethod(
        Invocation.method(
          #setAppOpenAt,
          [time],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setLinkageFlag(bool? isEnabled) => super.noSuchMethod(
        Invocation.method(
          #setLinkageFlag,
          [isEnabled],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool getLinkageFlag() => (super.noSuchMethod(
        Invocation.method(
          #getLinkageFlag,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  void saveReadArticleList(
    List<String>? articleIds,
    String? weekKey,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #saveReadArticleList,
          [
            articleIds,
            weekKey,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<String>? getReadArticleList(String? weekKey) =>
      (super.noSuchMethod(Invocation.method(
        #getReadArticleList,
        [weekKey],
      )) as List<String>?);

  @override
  void setUpdate(bool? isOpened) => super.noSuchMethod(
        Invocation.method(
          #setUpdate,
          [isOpened],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool getUpdate() => (super.noSuchMethod(
        Invocation.method(
          #getUpdate,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  void setIsFirstTime(bool? isFirst) => super.noSuchMethod(
        Invocation.method(
          #setIsFirstTime,
          [isFirst],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool getIsFirstTime() => (super.noSuchMethod(
        Invocation.method(
          #getIsFirstTime,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  void setInt(
    String? key,
    int? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  int? getInt(String? key) => (super.noSuchMethod(Invocation.method(
        #getInt,
        [key],
      )) as int?);

  @override
  void setBool(
    String? key,
    bool? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool? getBool(String? key) => (super.noSuchMethod(Invocation.method(
        #getBool,
        [key],
      )) as bool?);

  @override
  void setString(
    String? key,
    String? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String? getString(String? key) => (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
      )) as String?);
}
